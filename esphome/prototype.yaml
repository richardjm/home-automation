substitutions:
  device_name: "prototype"
  friendly_name: "Prototype"
  main_icon: "alpha-p-box-outline"
  dallas_address: "0x5d000003bddc4828"
  
#<<: !include base/the-cube.yaml
#<<: !include base/deep-sleep.yaml

esphome:
  name: "${device_name}"
  
esp8266:
  board: esp01_1m

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:
  password: !secret ota_password2

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${friendly_name} Fallback Hotspot"
    password: !secret hotspot_wifi_password

captive_portal:

# Value for holding if the initial value of deep sleep has been read
globals:
 - id: deep_sleep_valid
   type: bool
   initial_value: 'false'
   
# Sleep duration and failsafe run_duration (should be entered by on_value of
# temperature sensor)
deep_sleep:
  id: deep_sleep_control
  sleep_duration: 60s
  run_duration: 60s

dallas:
  - pin: GPIO4
    id: dallasbus
  
# Each time check if deep_sleep_valid - if so, check actual deep_sleep sensor
# and if true immediately enter deep sleep
sensor:
  - platform: dallas
    name: "${friendly_name} Temperature"
    address: "${dallas_address}"
    icon: "mdi:${main_icon}"
    on_value:
      then:
        - if:
            condition:
              - lambda: 'return id(deep_sleep_valid);'
            then:
              - if:
                  condition:
                    binary_sensor.is_on: esphome_allow_deep_sleep
                  then:
                    - logger.log:
                        format: 'Deep sleep allowed and entered'
                        tag: 'deep-sleep'
                    - delay: 1s
                    - deep_sleep.enter: deep_sleep_control
            else:
              - logger.log:
                  format: 'esphome_allow_deep_sleep not yet initialised'
                  tag: 'deep-sleep'

# On initial state or state changed allow entering deep sleep
# Doing it this way means only the temp update loop is required
# As soon as the deep sleep is turned on or retrieved a temp update is forced
# which will immediately enter deep sleep without wiating for run_duration
binary_sensor:
  - platform: homeassistant
    id: esphome_allow_deep_sleep
    entity_id: input_boolean.esphome_allow_deep_sleep
    publish_initial_state: true
    on_state:
      then:
        - lambda: 'id(deep_sleep_valid) = true;'
        - if:
            condition:
              binary_sensor.is_on: esphome_allow_deep_sleep
            then:
              - logger.log:
                  format: 'Deep sleep allowed, forcing update and sleep'
                  tag: 'deep-sleep'
              - deep_sleep.allow: deep_sleep_control
              # fast update and sleep
              - lambda: |-
                  // id(dallasbus).set_update_interval(5000);
                  id(dallasbus).update();
            else:
              - logger.log:
                  format: 'Preventing deep sleep'
                  tag: 'deep-sleep'
              - deep_sleep.prevent: deep_sleep_control
              
light:
 - platform: neopixelbus
   type: GRBW
   variant: SK6812
   pin: GPIO2
   num_leds: 1
   name: ${friendly_name} Light
   effects:
     - pulse:
         name: "Fast Pulse"
         transition_length: 0.3s
         update_interval: 0.5s
     - pulse:
         name: "Slow Pulse"
         transition_length: 0.3s
     - addressable_rainbow:
